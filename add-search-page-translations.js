import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Initialize Supabase client with service role key
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing required environment variables:');
  console.error('- VITE_SUPABASE_URL');
  console.error('- SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Search page translations for all languages
const searchPageTranslations = {
  en: {
    title: "Search Careers",
    placeholder: "Search for careers...",
    loadingCareers: "Loading careers...",
    filters: "Filters",
    industry: "Industry",
    allIndustries: "All Industries",
    experience: "Experience Level",
    allLevels: "All Levels",
    entryLevel: "Entry Level",
    intermediate: "Intermediate",
    advanced: "Advanced",
    expert: "Expert",
    noResults: "No careers found",
    tryAdjustingSearch: "Try adjusting your search or filters",
    clearSearch: "Clear Search",
    careersFound: "careers found",
    careerFound: "career found"
  },
  es: {
    title: "Buscar Carreras",
    placeholder: "Buscar carreras...",
    loadingCareers: "Cargando carreras...",
    filters: "Filtros",
    industry: "Industria",
    allIndustries: "Todas las Industrias",
    experience: "Nivel de Experiencia",
    allLevels: "Todos los Niveles",
    entryLevel: "Nivel de Entrada",
    intermediate: "Intermedio",
    advanced: "Avanzado",
    expert: "Experto",
    noResults: "No se encontraron carreras",
    tryAdjustingSearch: "Intenta ajustar tu b√∫squeda o filtros",
    clearSearch: "Limpiar B√∫squeda",
    careersFound: "carreras encontradas",
    careerFound: "carrera encontrada"
  },
  ja: {
    title: "„Ç≠„É£„É™„Ç¢Ê§úÁ¥¢",
    placeholder: "„Ç≠„É£„É™„Ç¢„ÇíÊ§úÁ¥¢...",
    loadingCareers: "„Ç≠„É£„É™„Ç¢„ÇíË™≠„ÅøËæº„Åø‰∏≠...",
    filters: "„Éï„Ç£„É´„Çø„Éº",
    industry: "Ê•≠Áïå",
    allIndustries: "„Åô„Åπ„Å¶„ÅÆÊ•≠Áïå",
    experience: "ÁµåÈ®ì„É¨„Éô„É´",
    allLevels: "„Åô„Åπ„Å¶„ÅÆ„É¨„Éô„É´",
    entryLevel: "„Ç®„É≥„Éà„É™„Éº„É¨„Éô„É´",
    intermediate: "‰∏≠Á¥ö",
    advanced: "‰∏äÁ¥ö",
    expert: "„Ç®„Ç≠„Çπ„Éë„Éº„Éà",
    noResults: "„Ç≠„É£„É™„Ç¢„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì",
    tryAdjustingSearch: "Ê§úÁ¥¢„Åæ„Åü„ÅØ„Éï„Ç£„É´„Çø„Éº„ÇíË™øÊï¥„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑ",
    clearSearch: "Ê§úÁ¥¢„Çí„ÇØ„É™„Ç¢",
    careersFound: "‰ª∂„ÅÆ„Ç≠„É£„É™„Ç¢„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü",
    careerFound: "‰ª∂„ÅÆ„Ç≠„É£„É™„Ç¢„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åó„Åü"
  },
  fr: {
    title: "Rechercher des Carri√®res",
    placeholder: "Rechercher des carri√®res...",
    loadingCareers: "Chargement des carri√®res...",
    filters: "Filtres",
    industry: "Industrie",
    allIndustries: "Toutes les Industries",
    experience: "Niveau d'Exp√©rience",
    allLevels: "Tous les Niveaux",
    entryLevel: "Niveau D√©butant",
    intermediate: "Interm√©diaire",
    advanced: "Avanc√©",
    expert: "Expert",
    noResults: "Aucune carri√®re trouv√©e",
    tryAdjustingSearch: "Essayez d'ajuster votre recherche ou vos filtres",
    clearSearch: "Effacer la Recherche",
    careersFound: "carri√®res trouv√©es",
    careerFound: "carri√®re trouv√©e"
  },
  de: {
    title: "Karrieren Suchen",
    placeholder: "Karrieren suchen...",
    loadingCareers: "Karrieren werden geladen...",
    filters: "Filter",
    industry: "Branche",
    allIndustries: "Alle Branchen",
    experience: "Erfahrungsstufe",
    allLevels: "Alle Stufen",
    entryLevel: "Einsteiger",
    intermediate: "Mittelstufe",
    advanced: "Fortgeschritten",
    expert: "Experte",
    noResults: "Keine Karrieren gefunden",
    tryAdjustingSearch: "Versuchen Sie, Ihre Suche oder Filter anzupassen",
    clearSearch: "Suche L√∂schen",
    careersFound: "Karrieren gefunden",
    careerFound: "Karriere gefunden"
  },
  pt: {
    title: "Buscar Carreiras",
    placeholder: "Buscar carreiras...",
    loadingCareers: "Carregando carreiras...",
    filters: "Filtros",
    industry: "Ind√∫stria",
    allIndustries: "Todas as Ind√∫strias",
    experience: "N√≠vel de Experi√™ncia",
    allLevels: "Todos os N√≠veis",
    entryLevel: "N√≠vel Inicial",
    intermediate: "Intermedi√°rio",
    advanced: "Avan√ßado",
    expert: "Especialista",
    noResults: "Nenhuma carreira encontrada",
    tryAdjustingSearch: "Tente ajustar sua pesquisa ou filtros",
    clearSearch: "Limpar Pesquisa",
    careersFound: "carreiras encontradas",
    careerFound: "carreira encontrada"
  },
  it: {
    title: "Cerca Carriere",
    placeholder: "Cerca carriere...",
    loadingCareers: "Caricamento carriere...",
    filters: "Filtri",
    industry: "Settore",
    allIndustries: "Tutti i Settori",
    experience: "Livello di Esperienza",
    allLevels: "Tutti i Livelli",
    entryLevel: "Livello Base",
    intermediate: "Intermedio",
    advanced: "Avanzato",
    expert: "Esperto",
    noResults: "Nessuna carriera trovata",
    tryAdjustingSearch: "Prova ad aggiustare la tua ricerca o i filtri",
    clearSearch: "Cancella Ricerca",
    careersFound: "carriere trovate",
    careerFound: "carriera trovata"
  },
  ko: {
    title: "Ï∫êÎ¶¨Ïñ¥ Í≤ÄÏÉâ",
    placeholder: "Ï∫êÎ¶¨Ïñ¥ Í≤ÄÏÉâ...",
    loadingCareers: "Ï∫êÎ¶¨Ïñ¥ Î°úÎî© Ï§ë...",
    filters: "ÌïÑÌÑ∞",
    industry: "ÏÇ∞ÏóÖ",
    allIndustries: "Î™®Îì† ÏÇ∞ÏóÖ",
    experience: "Í≤ΩÌóò ÏàòÏ§Ä",
    allLevels: "Î™®Îì† ÏàòÏ§Ä",
    entryLevel: "Ï¥àÍ∏â",
    intermediate: "Ï§ëÍ∏â",
    advanced: "Í≥†Í∏â",
    expert: "Ï†ÑÎ¨∏Í∞Ä",
    noResults: "Ï∫êÎ¶¨Ïñ¥Î•º Ï∞æÏùÑ Ïàò ÏóÜÏäµÎãàÎã§",
    tryAdjustingSearch: "Í≤ÄÏÉâÏñ¥ÎÇò ÌïÑÌÑ∞Î•º Ï°∞Ï†ïÌï¥Î≥¥ÏÑ∏Ïöî",
    clearSearch: "Í≤ÄÏÉâ ÏßÄÏö∞Í∏∞",
    careersFound: "Í∞úÏùò Ï∫êÎ¶¨Ïñ¥Î•º Ï∞æÏïòÏäµÎãàÎã§",
    careerFound: "Í∞úÏùò Ï∫êÎ¶¨Ïñ¥Î•º Ï∞æÏïòÏäµÎãàÎã§"
  },
  zh: {
    title: "ÊêúÁ¥¢ËÅå‰∏ö",
    placeholder: "ÊêúÁ¥¢ËÅå‰∏ö...",
    loadingCareers: "Ê≠£Âú®Âä†ËΩΩËÅå‰∏ö...",
    filters: "Á≠õÈÄâ",
    industry: "Ë°å‰∏ö",
    allIndustries: "ÊâÄÊúâË°å‰∏ö",
    experience: "ÁªèÈ™åÊ∞¥Âπ≥",
    allLevels: "ÊâÄÊúâÊ∞¥Âπ≥",
    entryLevel: "ÂÖ•Èó®Á∫ß",
    intermediate: "‰∏≠Á∫ß",
    advanced: "È´òÁ∫ß",
    expert: "‰∏ìÂÆ∂",
    noResults: "Êú™ÊâæÂà∞ËÅå‰∏ö",
    tryAdjustingSearch: "Â∞ùËØïË∞ÉÊï¥ÊÇ®ÁöÑÊêúÁ¥¢ÊàñÁ≠õÈÄâÊù°‰ª∂",
    clearSearch: "Ê∏ÖÈô§ÊêúÁ¥¢",
    careersFound: "‰∏™ËÅå‰∏ö",
    careerFound: "‰∏™ËÅå‰∏ö"
  },
  ru: {
    title: "–ü–æ–∏—Å–∫ –ö–∞—Ä—å–µ—Ä—ã",
    placeholder: "–ü–æ–∏—Å–∫ –∫–∞—Ä—å–µ—Ä—ã...",
    loadingCareers: "–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—å–µ—Ä—ã...",
    filters: "–§–∏–ª—å—Ç—Ä—ã",
    industry: "–û—Ç—Ä–∞—Å–ª—å",
    allIndustries: "–í—Å–µ –û—Ç—Ä–∞—Å–ª–∏",
    experience: "–£—Ä–æ–≤–µ–Ω—å –û–ø—ã—Ç–∞",
    allLevels: "–í—Å–µ –£—Ä–æ–≤–Ω–∏",
    entryLevel: "–ù–∞—á–∞–ª—å–Ω—ã–π",
    intermediate: "–°—Ä–µ–¥–Ω–∏–π",
    advanced: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π",
    expert: "–≠–∫—Å–ø–µ—Ä—Ç",
    noResults: "–ö–∞—Ä—å–µ—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞",
    tryAdjustingSearch: "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ–∏—Å–∫ –∏–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã",
    clearSearch: "–û—á–∏—Å—Ç–∏—Ç—å –ü–æ–∏—Å–∫",
    careersFound: "–∫–∞—Ä—å–µ—Ä –Ω–∞–π–¥–µ–Ω–æ",
    careerFound: "–∫–∞—Ä—å–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞"
  },
  ar: {
    title: "ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸáŸÜ",
    placeholder: "ÿßŸÑÿ®ÿ≠ÿ´ ÿπŸÜ ÿßŸÑŸÖŸáŸÜ...",
    loadingCareers: "ÿ¨ÿßÿ±Ÿä ÿ™ÿ≠ŸÖŸäŸÑ ÿßŸÑŸÖŸáŸÜ...",
    filters: "ÿßŸÑŸÖÿ±ÿ¥ÿ≠ÿßÿ™",
    industry: "ÿßŸÑÿµŸÜÿßÿπÿ©",
    allIndustries: "ÿ¨ŸÖŸäÿπ ÿßŸÑÿµŸÜÿßÿπÿßÿ™",
    experience: "ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑÿÆÿ®ÿ±ÿ©",
    allLevels: "ÿ¨ŸÖŸäÿπ ÿßŸÑŸÖÿ≥ÿ™ŸàŸäÿßÿ™",
    entryLevel: "ŸÖÿ≥ÿ™ŸàŸâ ÿßŸÑŸÖÿ®ÿ™ÿØÿ¶ŸäŸÜ",
    intermediate: "ŸÖÿ™Ÿàÿ≥ÿ∑",
    advanced: "ŸÖÿ™ŸÇÿØŸÖ",
    expert: "ÿÆÿ®Ÿäÿ±",
    noResults: "ŸÑŸÖ Ÿäÿ™ŸÖ ÿßŸÑÿπÿ´Ÿàÿ± ÿπŸÑŸâ ŸÖŸáŸÜ",
    tryAdjustingSearch: "ÿ≠ÿßŸàŸÑ ÿ™ÿπÿØŸäŸÑ ÿßŸÑÿ®ÿ≠ÿ´ ÿ£Ÿà ÿßŸÑŸÖÿ±ÿ¥ÿ≠ÿßÿ™",
    clearSearch: "ŸÖÿ≥ÿ≠ ÿßŸÑÿ®ÿ≠ÿ´",
    careersFound: "ŸÖŸáŸÜÿ© ŸÖŸàÿ¨ŸàÿØÿ©",
    careerFound: "ŸÖŸáŸÜÿ© ŸÖŸàÿ¨ŸàÿØÿ©"
  }
};

async function addSearchPageTranslations() {
  console.log('üîç Adding search page translations to all languages...');

  try {
    for (const [languageCode, translations] of Object.entries(searchPageTranslations)) {
      console.log(`\nüìù Updating ${languageCode} with search page translations...`);
      
      // Get existing translation data
      const { data: existingData, error: fetchError } = await supabase
        .from('translations')
        .select('translation_data')
        .eq('language_code', languageCode)
        .eq('is_active', true)
        .single();

      if (fetchError && fetchError.code !== 'PGRST116') {
        console.error(`‚ùå Error fetching existing ${languageCode} data:`, fetchError);
        continue;
      }

      // Merge with existing data
      const existingTranslations = existingData?.translation_data || {};
      
      // Ensure pages section exists
      if (!existingTranslations.pages) {
        existingTranslations.pages = {};
      }
      
      // Ensure search section exists
      if (!existingTranslations.pages.search) {
        existingTranslations.pages.search = {};
      }
      
      // Add all search page translations
      Object.entries(translations).forEach(([key, value]) => {
        existingTranslations.pages.search[key] = value;
        console.log(`  ‚úÖ Added pages.search.${key}: "${value}"`);
      });

      // First try to update existing record
      const { data: updateData, error: updateError } = await supabase
        .from('translations')
        .update({
          translation_data: existingTranslations,
          version: Date.now().toString(),
          is_active: true,
          updated_at: new Date().toISOString()
        })
        .eq('language_code', languageCode)
        .select();

      if (updateError || !updateData || updateData.length === 0) {
        // If update failed, try to insert new record
        console.log(`üìù No existing record found for ${languageCode}, inserting new record...`);
        
        const { error: insertError } = await supabase
          .from('translations')
          .insert({
            language_code: languageCode,
            translation_data: existingTranslations,
            version: Date.now().toString(),
            is_active: true,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          });

        if (insertError) {
          console.error(`‚ùå Error inserting ${languageCode}:`, insertError);
        } else {
          console.log(`‚úÖ Successfully inserted ${languageCode} with search page translations`);
        }
      } else {
        console.log(`‚úÖ Successfully updated ${languageCode} with search page translations`);
      }
    }

    console.log('\n‚úÖ All search page translations added!');

  } catch (error) {
    console.error('‚ùå Error during translation updates:', error);
  }
}

// Run the update
addSearchPageTranslations();
