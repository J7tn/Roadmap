import { createClient } from '@supabase/supabase-js';
import dotenv from 'dotenv';

// Load environment variables
dotenv.config();

// Initialize Supabase client with service role key
const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceKey) {
  console.error('Missing required environment variables:');
  console.error('- VITE_SUPABASE_URL');
  console.error('- SUPABASE_SERVICE_ROLE_KEY');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseServiceKey);

// Market trends translations for all languages
const marketTrendsTranslations = {
  en: {
    decliningSkills: "Declining Skills",
    industryGrowth: "Industry Growth", 
    decliningIndustries: "Declining Industries",
    emergingRoles: "Emerging Roles",
    skillsInHighDemand: "Skills in High Demand",
    industryGrowthAnalysis: "Industry Growth Analysis"
  },
  es: {
    decliningSkills: "Habilidades en Declive",
    industryGrowth: "Crecimiento de la Industria",
    decliningIndustries: "Industrias en Declive", 
    emergingRoles: "Roles Emergentes",
    skillsInHighDemand: "Habilidades en Alta Demanda",
    industryGrowthAnalysis: "An√°lisis de Crecimiento de la Industria"
  },
  ja: {
    decliningSkills: "Ë°∞ÈÄÄ„Çπ„Ç≠„É´",
    industryGrowth: "Ê•≠ÁïåÊàêÈï∑",
    decliningIndustries: "Ë°∞ÈÄÄÊ•≠Áïå",
    emergingRoles: "Êñ∞Ëàà„É≠„Éº„É´",
    skillsInHighDemand: "È´òÈúÄË¶Å„Çπ„Ç≠„É´",
    industryGrowthAnalysis: "Ê•≠ÁïåÊàêÈï∑ÂàÜÊûê"
  },
  fr: {
    decliningSkills: "Comp√©tences en D√©clin",
    industryGrowth: "Croissance de l'Industrie",
    decliningIndustries: "Industries en D√©clin",
    emergingRoles: "R√¥les √âmergents", 
    skillsInHighDemand: "Comp√©tences Tr√®s Demand√©es",
    industryGrowthAnalysis: "Analyse de Croissance de l'Industrie"
  },
  de: {
    decliningSkills: "R√ºckl√§ufige F√§higkeiten",
    industryGrowth: "Branchenwachstum",
    decliningIndustries: "R√ºckl√§ufige Branchen",
    emergingRoles: "Aufkommende Rollen",
    skillsInHighDemand: "Hochgefragte F√§higkeiten", 
    industryGrowthAnalysis: "Branchenwachstumsanalyse"
  },
  pt: {
    decliningSkills: "Habilidades em Decl√≠nio",
    industryGrowth: "Crescimento da Ind√∫stria",
    decliningIndustries: "Ind√∫strias em Decl√≠nio",
    emergingRoles: "Fun√ß√µes Emergentes",
    skillsInHighDemand: "Habilidades em Alta Demanda",
    industryGrowthAnalysis: "An√°lise de Crescimento da Ind√∫stria"
  },
  it: {
    decliningSkills: "Competenze in Declino",
    industryGrowth: "Crescita dell'Industria", 
    decliningIndustries: "Industrie in Declino",
    emergingRoles: "Ruoli Emergenti",
    skillsInHighDemand: "Competenze Molto Richieste",
    industryGrowthAnalysis: "Analisi della Crescita dell'Industria"
  },
  ko: {
    decliningSkills: "Ïá†Ìá¥ Ïä§ÌÇ¨",
    industryGrowth: "ÏÇ∞ÏóÖ ÏÑ±Ïû•",
    decliningIndustries: "Ïá†Ìá¥ ÏÇ∞ÏóÖ",
    emergingRoles: "Ïã†Ìù• Ïó≠Ìï†",
    skillsInHighDemand: "Í≥†ÏàòÏöî Ïä§ÌÇ¨",
    industryGrowthAnalysis: "ÏÇ∞ÏóÖ ÏÑ±Ïû• Î∂ÑÏÑù"
  },
  zh: {
    decliningSkills: "Ë°∞ÈÄÄÊäÄËÉΩ",
    industryGrowth: "Ë°å‰∏öÂ¢ûÈïø",
    decliningIndustries: "Ë°∞ÈÄÄË°å‰∏ö", 
    emergingRoles: "Êñ∞ÂÖ¥ËßíËâ≤",
    skillsInHighDemand: "È´òÈúÄÊ±ÇÊäÄËÉΩ",
    industryGrowthAnalysis: "Ë°å‰∏öÂ¢ûÈïøÂàÜÊûê"
  },
  ru: {
    decliningSkills: "–£–±—ã–≤–∞—é—â–∏–µ –ù–∞–≤—ã–∫–∏",
    industryGrowth: "–†–æ—Å—Ç –û—Ç—Ä–∞—Å–ª–∏",
    decliningIndustries: "–£–±—ã–≤–∞—é—â–∏–µ –û—Ç—Ä–∞—Å–ª–∏",
    emergingRoles: "–ù–æ–≤—ã–µ –†–æ–ª–∏",
    skillsInHighDemand: "–í—ã—Å–æ–∫–∏–π –°–ø—Ä–æ—Å –Ω–∞ –ù–∞–≤—ã–∫–∏",
    industryGrowthAnalysis: "–ê–Ω–∞–ª–∏–∑ –†–æ—Å—Ç–∞ –û—Ç—Ä–∞—Å–ª–∏"
  },
  ar: {
    decliningSkills: "ÿßŸÑŸÖŸáÿßÿ±ÿßÿ™ ÿßŸÑŸÖÿ™ÿ±ÿßÿ¨ÿπÿ©",
    industryGrowth: "ŸÜŸÖŸà ÿßŸÑÿµŸÜÿßÿπÿ©",
    decliningIndustries: "ÿßŸÑÿµŸÜÿßÿπÿßÿ™ ÿßŸÑŸÖÿ™ÿ±ÿßÿ¨ÿπÿ©",
    emergingRoles: "ÿßŸÑÿ£ÿØŸàÿßÿ± ÿßŸÑŸÜÿßÿ¥ÿ¶ÿ©",
    skillsInHighDemand: "ÿßŸÑŸÖŸáÿßÿ±ÿßÿ™ ÿπÿßŸÑŸäÿ© ÿßŸÑÿ∑ŸÑÿ®",
    industryGrowthAnalysis: "ÿ™ÿ≠ŸÑŸäŸÑ ŸÜŸÖŸà ÿßŸÑÿµŸÜÿßÿπÿ©"
  }
};

async function addMarketTrendsTranslations() {
  console.log('üåç Adding market trends translations to all languages...');

  try {
    for (const [languageCode, translations] of Object.entries(marketTrendsTranslations)) {
      console.log(`\nüìù Updating ${languageCode} with market trends translations...`);
      
      // Get existing translation data
      const { data: existingData, error: fetchError } = await supabase
        .from('translations')
        .select('translation_data')
        .eq('language_code', languageCode)
        .eq('is_active', true)
        .single();

      if (fetchError && fetchError.code !== 'PGRST116') {
        console.error(`‚ùå Error fetching existing ${languageCode} data:`, fetchError);
        continue;
      }

      // Merge with existing data
      const existingTranslations = existingData?.translation_data || {};
      
      // Ensure marketTrends section exists
      if (!existingTranslations.marketTrends) {
        existingTranslations.marketTrends = {};
      }
      
      // Add all market trends translations
      Object.entries(translations).forEach(([key, value]) => {
        existingTranslations.marketTrends[key] = value;
        console.log(`  ‚úÖ Added marketTrends.${key}: "${value}"`);
      });

      // First try to update existing record
      const { data: updateData, error: updateError } = await supabase
        .from('translations')
        .update({
          translation_data: existingTranslations,
          version: Date.now().toString(),
          is_active: true,
          updated_at: new Date().toISOString()
        })
        .eq('language_code', languageCode)
        .select();

      if (updateError || !updateData || updateData.length === 0) {
        // If update failed, try to insert new record
        console.log(`üìù No existing record found for ${languageCode}, inserting new record...`);
        
        const { error: insertError } = await supabase
          .from('translations')
          .insert({
            language_code: languageCode,
            translation_data: existingTranslations,
            version: Date.now().toString(),
            is_active: true,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          });

        if (insertError) {
          console.error(`‚ùå Error inserting ${languageCode}:`, insertError);
        } else {
          console.log(`‚úÖ Successfully inserted ${languageCode} with market trends translations`);
        }
      } else {
        console.log(`‚úÖ Successfully updated ${languageCode} with market trends translations`);
      }
    }

    console.log('\n‚úÖ All market trends translations added!');

  } catch (error) {
    console.error('‚ùå Error during translation updates:', error);
  }
}

// Run the update
addMarketTrendsTranslations();
